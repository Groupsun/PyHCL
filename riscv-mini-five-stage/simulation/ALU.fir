circuit ALU : @[alu.py:21]
  module ALU : @[alu.py:21]
    input clock : Clock @[rawmodule.py:100]
    input reset : UInt<1> @[rawmodule.py:101]
    output io : {flip src_a : UInt<32>, flip src_b : UInt<32>, flip ALUOp : UInt<5>, sum : UInt<32>, conflag : UInt<1>} @[alu.py:11]

    node _T_9 = bits(io.src_b, 5, 0) @[alu.py:24]
    node _T_10 = add(io.src_a, io.src_b) @[alu.py:26]
    node _T_11 = sub(io.src_a, io.src_b) @[alu.py:27]
    node _T_12 = and(io.src_a, io.src_b) @[alu.py:28]
    node _T_13 = or(io.src_a, io.src_b) @[alu.py:29]
    node _T_14 = xor(io.src_a, io.src_b) @[alu.py:30]
    node _T_15 = dshl(io.src_a, _T_9) @[alu.py:31]
    node _T_16 = dshr(io.src_a, _T_9) @[alu.py:32]
    node _T_17 = asSInt(io.src_a) @[alu.py:33]
    node _T_18 = dshr(_T_17, _T_9) @[alu.py:33]
    node _T_19 = asUInt(_T_18) @[alu.py:33]
    node _T_20 = asSInt(io.src_a) @[alu.py:34]
    node _T_21 = asSInt(io.src_b) @[alu.py:34]
    node _T_22 = lt(_T_20, _T_21) @[alu.py:34]
    node _T_23 = lt(io.src_a, io.src_b) @[alu.py:35]
    node _T_24 = eq(io.ALUOp, UInt<5>(9)) @[mux.py:72]
    node _T_25 = mux(_T_24, _T_23, io.src_b) @[alu.py:35]
    node _T_26 = eq(io.ALUOp, UInt<5>(8)) @[mux.py:72]
    node _T_27 = mux(_T_26, _T_22, _T_25) @[alu.py:35]
    node _T_28 = eq(io.ALUOp, UInt<5>(7)) @[mux.py:72]
    node _T_29 = mux(_T_28, _T_19, _T_27) @[alu.py:35]
    node _T_30 = eq(io.ALUOp, UInt<5>(6)) @[mux.py:72]
    node _T_31 = mux(_T_30, _T_16, _T_29) @[alu.py:35]
    node _T_32 = eq(io.ALUOp, UInt<5>(5)) @[mux.py:72]
    node _T_33 = mux(_T_32, _T_15, _T_31) @[alu.py:35]
    node _T_34 = eq(io.ALUOp, UInt<5>(4)) @[mux.py:72]
    node _T_35 = mux(_T_34, _T_14, _T_33) @[alu.py:35]
    node _T_36 = eq(io.ALUOp, UInt<5>(3)) @[mux.py:72]
    node _T_37 = mux(_T_36, _T_13, _T_35) @[alu.py:35]
    node _T_38 = eq(io.ALUOp, UInt<5>(2)) @[mux.py:72]
    node _T_39 = mux(_T_38, _T_12, _T_37) @[alu.py:35]
    node _T_40 = eq(io.ALUOp, UInt<5>(1)) @[mux.py:72]
    node _T_41 = mux(_T_40, _T_11, _T_39) @[alu.py:35]
    node _T_42 = eq(io.ALUOp, UInt<5>(0)) @[mux.py:72]
    node _T_43 = mux(_T_42, _T_10, _T_41) @[alu.py:35]
    io.sum <= _T_43 @[alu.py:35]
    node _T_44 = asSInt(io.src_a) @[alu.py:39]
    node _T_45 = asSInt(io.src_b) @[alu.py:39]
    node _T_46 = eq(_T_44, _T_45) @[alu.py:39]
    node _T_47 = asSInt(io.src_a) @[alu.py:40]
    node _T_48 = asSInt(io.src_b) @[alu.py:40]
    node _T_49 = eq(_T_47, _T_48) @[alu.py:40]
    node _T_50 = asSInt(io.src_a) @[alu.py:41]
    node _T_51 = asSInt(io.src_b) @[alu.py:41]
    node _T_52 = lt(_T_50, _T_51) @[alu.py:41]
    node _T_53 = asSInt(io.src_a) @[alu.py:42]
    node _T_54 = asSInt(io.src_b) @[alu.py:42]
    node _T_55 = geq(_T_53, _T_54) @[alu.py:42]
    node _T_56 = lt(io.src_a, io.src_b) @[alu.py:43]
    node _T_57 = geq(io.src_a, io.src_b) @[alu.py:44]
    node _T_58 = eq(io.ALUOp, UInt<5>(15)) @[mux.py:72]
    node _T_59 = mux(_T_58, _T_57, UInt(0)) @[alu.py:44]
    node _T_60 = eq(io.ALUOp, UInt<5>(14)) @[mux.py:72]
    node _T_61 = mux(_T_60, _T_56, _T_59) @[alu.py:44]
    node _T_62 = eq(io.ALUOp, UInt<5>(13)) @[mux.py:72]
    node _T_63 = mux(_T_62, _T_55, _T_61) @[alu.py:44]
    node _T_64 = eq(io.ALUOp, UInt<5>(12)) @[mux.py:72]
    node _T_65 = mux(_T_64, _T_52, _T_63) @[alu.py:44]
    node _T_66 = eq(io.ALUOp, UInt<5>(11)) @[mux.py:72]
    node _T_67 = mux(_T_66, _T_49, _T_65) @[alu.py:44]
    node _T_68 = eq(io.ALUOp, UInt<5>(10)) @[mux.py:72]
    node _T_69 = mux(_T_68, _T_46, _T_67) @[alu.py:44]
    io.conflag <= _T_69 @[alu.py:44]


