circuit IF_ID_Register : @[if_id_register.py:28]
  module IF_ID_Register : @[if_id_register.py:28]
    input clock : Clock @[rawmodule.py:100]
    input reset : UInt<1> @[rawmodule.py:101]
    output io : {flip if_pc : UInt<32>, flip if_pc_4 : UInt<32>, flip if_inst : UInt<32>, id_pc : UInt<32>, id_pc_4 : UInt<32>, id_rs1 : UInt<5>, id_rs2 : UInt<5>, id_inst : UInt<32>, flip IF_ID_Write : UInt<1>, flip IF_ID_Flush : UInt<1>} @[if_id_register.py:11]

    reg pc : UInt<32>, clock with: (reset => (reset, UInt(0))) @[if_id_register.py:31]
    reg pc_4 : UInt<32>, clock with: (reset => (reset, UInt(0))) @[if_id_register.py:32]
    reg inst : UInt<32>, clock with: (reset => (reset, UInt(0))) @[if_id_register.py:33]
    node _T_17 = bits(io.IF_ID_Flush, 0, 0) @[define.py:153]
    node _T_18 = bits(io.IF_ID_Write, 0, 0) @[define.py:153]
    node _T_19 = mux(_T_18, io.if_pc, pc) @[if_id_register.py:36]
    node _T_20 = mux(_T_17, UInt(0), _T_19) @[if_id_register.py:36]
    pc <= _T_20 @[if_id_register.py:36]
    node _T_21 = bits(io.IF_ID_Flush, 0, 0) @[define.py:153]
    node _T_22 = bits(io.IF_ID_Write, 0, 0) @[define.py:153]
    node _T_23 = mux(_T_22, io.if_pc_4, pc_4) @[if_id_register.py:38]
    node _T_24 = mux(_T_21, UInt(0), _T_23) @[if_id_register.py:38]
    pc_4 <= _T_24 @[if_id_register.py:38]
    node _T_25 = bits(io.IF_ID_Flush, 0, 0) @[define.py:153]
    node _T_26 = bits(io.IF_ID_Write, 0, 0) @[define.py:153]
    node _T_27 = mux(_T_26, io.if_inst, inst) @[if_id_register.py:40]
    node _T_28 = mux(_T_25, UInt(0), _T_27) @[if_id_register.py:40]
    inst <= _T_28 @[if_id_register.py:40]
    io.id_pc <= pc @[if_id_register.py:42]
    io.id_pc_4 <= pc_4 @[if_id_register.py:43]
    io.id_inst <= inst @[if_id_register.py:44]
    node _T_29 = bits(inst, 19, 15) @[if_id_register.py:45]
    io.id_rs1 <= _T_29 @[if_id_register.py:45]
    node _T_30 = bits(inst, 24, 20) @[if_id_register.py:46]
    io.id_rs2 <= _T_30 @[if_id_register.py:46]


