circuit Forward : @[forward.py:28]
  module Forward : @[forward.py:28]
    input clock : Clock @[rawmodule.py:100]
    input reset : UInt<1> @[rawmodule.py:101]
    output io : {flip ex_mem_Reg_Write : UInt<1>, flip ex_mem_rd : UInt<5>, flip ex_mem_Mem_Write : UInt<1>, flip ex_mem_rs2 : UInt<5>, flip mem_wb_Reg_Write : UInt<1>, flip mem_wb_rd : UInt<5>, flip id_ex_rs1 : UInt<5>, flip id_ex_rs2 : UInt<5>, Forward_A : UInt<2>, Forward_B : UInt<2>, MemWrite_Src : UInt<1>} @[forward.py:11]

    node _T_15 = bits(io.ex_mem_Reg_Write, 0, 0) @[define.py:161]
    node _T_16 = neq(io.ex_mem_rd, UInt(0)) @[forward.py:31]
    node _T_17 = and(_T_15, _T_16) @[forward.py:31]
    node _T_18 = eq(io.ex_mem_rd, io.id_ex_rs1) @[forward.py:32]
    node _T_19 = and(_T_17, _T_18) @[forward.py:32]
    node _T_20 = bits(io.mem_wb_Reg_Write, 0, 0) @[define.py:161]
    node _T_21 = neq(io.mem_wb_rd, UInt(0)) @[forward.py:34]
    node _T_22 = and(_T_20, _T_21) @[forward.py:34]
    node _T_23 = not(_T_19) @[forward.py:34]
    node _T_24 = and(_T_22, _T_23) @[forward.py:34]
    node _T_25 = eq(io.mem_wb_rd, io.id_ex_rs1) @[forward.py:34]
    node _T_26 = and(_T_24, _T_25) @[forward.py:34]
    node _T_27 = bits(io.ex_mem_Reg_Write, 0, 0) @[define.py:161]
    node _T_28 = neq(io.ex_mem_rd, UInt(0)) @[forward.py:36]
    node _T_29 = and(_T_27, _T_28) @[forward.py:36]
    node _T_30 = eq(io.ex_mem_rd, io.id_ex_rs2) @[forward.py:37]
    node _T_31 = and(_T_29, _T_30) @[forward.py:37]
    node _T_32 = bits(io.mem_wb_Reg_Write, 0, 0) @[define.py:161]
    node _T_33 = neq(io.mem_wb_rd, UInt(0)) @[forward.py:39]
    node _T_34 = and(_T_32, _T_33) @[forward.py:39]
    node _T_35 = not(_T_31) @[forward.py:39]
    node _T_36 = and(_T_34, _T_35) @[forward.py:39]
    node _T_37 = eq(io.mem_wb_rd, io.id_ex_rs2) @[forward.py:39]
    node _T_38 = and(_T_36, _T_37) @[forward.py:39]
    node _T_39 = cat(_T_19, _T_26) @[forward.py:41]
    io.Forward_A <= _T_39 @[forward.py:41]
    node _T_40 = cat(_T_31, _T_38) @[forward.py:42]
    io.Forward_B <= _T_40 @[forward.py:42]
    node _T_41 = bits(io.mem_wb_Reg_Write, 0, 0) @[define.py:161]
    node _T_42 = bits(io.ex_mem_Mem_Write, 0, 0) @[define.py:161]
    node _T_43 = and(_T_41, _T_42) @[forward.py:45]
    node _T_44 = eq(io.ex_mem_rs2, io.mem_wb_rd) @[forward.py:46]
    node _T_45 = and(_T_43, _T_44) @[forward.py:46]
    node _T_46 = mux(_T_45, UInt<1>(1), UInt<1>(0)) @[forward.py:48]
    io.MemWrite_Src <= _T_46 @[forward.py:48]


