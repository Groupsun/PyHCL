circuit DataCache : @[datacache.py:24]
  module DataCache : @[datacache.py:24]
    input clock : Clock @[rawmodule.py:100]
    input reset : UInt<1> @[rawmodule.py:101]
    output io : {flip addr : UInt<32>, flip write_data : UInt<32>, flip Mem_Read : UInt<1>, flip Mem_Write : UInt<1>, flip Data_Size : UInt<2>, flip Load_Type : UInt<1>, data_out : UInt<32>} @[datacache.py:11]

    cmem cache : UInt<32>[32] @[datacache.py:27]
    node _T_12 = div(io.addr, UInt<3>(4)) @[datacache.py:28]
    node _T_13 = bits(io.write_data, 15, 0) @[datacache.py:32]
    node _T_14 = cat(UInt<16>(0), _T_13) @[datacache.py:32]
    node _T_15 = bits(io.write_data, 7, 0) @[datacache.py:33]
    node _T_16 = cat(UInt<24>(0), _T_15) @[datacache.py:33]
    node _T_17 = eq(io.Data_Size, UInt<2>(2)) @[mux.py:72]
    node _T_18 = mux(_T_17, _T_16, io.write_data) @[datacache.py:33]
    node _T_19 = eq(io.Data_Size, UInt<2>(1)) @[mux.py:72]
    node _T_20 = mux(_T_19, _T_14, _T_18) @[datacache.py:33]
    node _T_21 = eq(io.Data_Size, UInt<2>(0)) @[mux.py:72]
    node _T_22 = mux(_T_21, io.write_data, _T_20) @[datacache.py:33]
    node _T_23 = cat(io.Data_Size, io.Load_Type) @[datacache.py:36]
    read mport _T_24 = cache[_T_12], clock @[memory.py:52]
    read mport _T_25 = cache[_T_12], clock @[memory.py:52]
    read mport _T_26 = cache[_T_12], clock @[memory.py:52]
    node _T_27 = bits(_T_26, 15, 0) @[datacache.py:38]
    read mport _T_28 = cache[_T_12], clock @[memory.py:52]
    node _T_29 = bits(_T_28, 15, 0) @[datacache.py:39]
    node _T_30 = asSInt(_T_29) @[datacache.py:39]
    node _T_31 = dshl(_T_30, UInt<5>(16)) @[datacache.py:39]
    node _T_32 = dshr(_T_31, UInt<5>(16)) @[datacache.py:39]
    node _T_33 = asUInt(_T_32) @[datacache.py:39]
    read mport _T_34 = cache[_T_12], clock @[memory.py:52]
    node _T_35 = bits(_T_34, 7, 0) @[datacache.py:40]
    read mport _T_36 = cache[_T_12], clock @[memory.py:52]
    node _T_37 = bits(_T_36, 7, 0) @[datacache.py:41]
    node _T_38 = asSInt(_T_37) @[datacache.py:41]
    node _T_39 = dshl(_T_38, UInt<5>(24)) @[datacache.py:41]
    node _T_40 = dshr(_T_39, UInt<5>(24)) @[datacache.py:41]
    node _T_41 = asUInt(_T_40) @[datacache.py:41]
    node _T_42 = eq(UInt<3>(4), _T_23) @[mux.py:72]
    node _T_43 = mux(_T_42, _T_41, _T_24) @[datacache.py:41]
    node _T_44 = eq(UInt<3>(5), _T_23) @[mux.py:72]
    node _T_45 = mux(_T_44, _T_35, _T_43) @[datacache.py:41]
    node _T_46 = eq(UInt<3>(2), _T_23) @[mux.py:72]
    node _T_47 = mux(_T_46, _T_33, _T_45) @[datacache.py:41]
    node _T_48 = eq(UInt<3>(3), _T_23) @[mux.py:72]
    node _T_49 = mux(_T_48, _T_27, _T_47) @[datacache.py:41]
    node _T_50 = eq(UInt<3>(1), _T_23) @[mux.py:72]
    node _T_51 = mux(_T_50, _T_25, _T_49) @[datacache.py:41]
    write mport _T_52 = cache[_T_12], clock @[memory.py:52]
    node _T_53 = bits(io.Mem_Write, 0, 0) @[define.py:161]
    read mport _T_54 = cache[_T_12], clock @[memory.py:52]
    node _T_55 = mux(_T_53, _T_22, _T_54) @[datacache.py:44]
    _T_52 <= _T_55 @[datacache.py:44]
    node _T_56 = bits(io.Mem_Read, 0, 0) @[define.py:161]
    node _T_57 = mux(_T_56, _T_51, UInt(0)) @[datacache.py:45]
    io.data_out <= _T_57 @[datacache.py:45]


